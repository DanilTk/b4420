input {
  tcp {
    port => 5044
    codec => json
  }
}

filter {
  date {
    match => ["[timestamp]", "yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSSZ", "yyyy-MM-dd'T'HH:mm:ss.SSSZ"]
    target => "@timestamp"
  }

  if [logger] == "REQUEST_LOGGER" and [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "logbook_json"
    }

    mutate {
      add_field => {
        "http_method" => "%{[logbook_json][method]}"
        "http_uri"    => "%{[logbook_json][uri]}"
      }
    }

    mutate {
      remove_field => [
        "[logbook_json][origin]",
        "[logbook_json][type]",
        "[logbook_json][correlation]",
        "[logbook_json][protocol]",
        "[logbook_json][remote]",
        "[logbook_json][host]",
        "[logbook_json][path]",
        "[logbook_json][scheme]",
        "[logbook_json][port]",
        "[logbook_json][headers]",
        "[logbook_json][method]",
        "[logbook_json][uri]"
      ]
    }

    ruby {
      code => '
        body = event.get("[logbook_json][body]")
        if body.is_a?(Hash)
          require "json"
          event.set("message", body.to_json)
        elsif body.is_a?(String)
          event.set("message", body)
        else
          event.set("message", "")
        end
      '
    }

    mutate {
      remove_field => ["logbook_json"]
    }
  }

  if [logger] == "RESPONSE_LOGGER" and [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "logbook_json"
    }

    mutate {
      add_field => {
        "request_duration_ms" => "%{[logbook_json][duration]}"
        "http_status"         => "%{[logbook_json][status]}"
      }
      convert => {
        "request_duration_ms" => "integer"
        "http_status"         => "integer"
      }
    }

    mutate {
      remove_field => [
        "[logbook_json][origin]",
        "[logbook_json][type]",
        "[logbook_json][headers]",
        "[logbook_json][correlation]",
        "[logbook_json][protocol]",
        "[logbook_json][Date]",
        "[logbook_json][duration]",
        "[logbook_json][status]"
      ]
    }

    ruby {
      code => '
        body = event.get("[logbook_json][body]")
        if body.is_a?(Hash)
          require "json"
          event.set("message", body.to_json)
        elsif body.is_a?(String)
          event.set("message", body)
        else
          event.set("message", "")
        end
      '
    }

    mutate {
      remove_field => ["logbook_json"]
    }
  }

  if [logger] == "TIMER_LOGGER" and [message] =~ /^.*#.* executed in \d+ms$/ {
    grok {
      match => {
        "message" => "%{JAVACLASS}#%{WORD} executed in %{NUMBER:method_duration:int}ms"
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "application-logs-%{+YYYY.MM.dd}"
  }

  stdout {
    codec => rubydebug
  }
}
